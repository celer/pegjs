var _args =  arguments;

PegJSUtils=function(){
        PegJSUtils.prototype.FILE_STDIN  = "-";
        PegJSUtils.prototype.FILE_STDOUT = "-";
        
        /*
          Is this node js?
        */
        if(typeof require!=="undefined"){
          
          sys = require("sys");
          fs = require("fs");
          events = require('events');
          peg = require("../lib/peg");

          PegJSUtils.prototype.print=sys.puts;
          PegJSUtils.prototype.error=sys.error;
          PegJSUtils.prototype.exit=process.exit;
          
          PegJSUtils.prototype.args=function(){
            var args = process.argv;
            args.shift();
            args.shift();
            return args;
          }         

          PegJSUtils.prototype.readFile=function(inputFile,callback) {
            if(inputFile===this.FILE_STDIN){
              var stdin = process.openStdin();
              stdin.setEncoding('ascii');
              var data = "";
              stdin.addListener("data",function(_data){ data+=_data; });
              stdin.addListener("end", function(){ return callback(data); });
            } else {
              var data = fs.readFileSync(inputFile,"ascii");
              return callback(data);
            }
          }
          PegJSUtils.prototype.PEG=peg.PEG;        
  
          PegJSUtils.prototype.writeFile=function(outputFile,text){
            try {
              if(outputFile===this.FILE_STDOUT){
                var stdout = process.openStdout();
                stdout.write(text);
                stdout.end();
              } else {
                fs.writeFile(outputFile,text);
              }
            } catch (e){
              abort(e);
            }
          }
        /*
          Is this rhino?
        */
        } else if(typeof importPackage!=="undefined"){
          importPackage(java.io);
          importPackage(java.lang);

          load(_args[0] + "/../lib/peg.js");
          PegJSUtils.prototype.PEG=PEG; 
          PegJSUtils.prototype.print=print;
          PegJSUtils.prototype.error=function(out){ System.err.println(out); };
          PegJSUtils.prototype.exit=quit;
          PegJSUtils.prototype.readFile=function(file,callback){
            var f = new BufferedReader(new InputStreamReader(
              file === this.FILE_STDIN ? System["in"] : new FileInputStream(file)
            ));

            var result = "";
            var line = "";
            try {
              while ((line = f.readLine()) !== null) {
                result += line + "\n";
              }
            } finally {
              f.close();
            }

            return callback(result);
          }
          PegJSUtils.prototype.writeFile=function(file, text) {
            var f = new BufferedWriter(new OutputStreamWriter(
              file === this.FILE_STDOUT ? System.out : new FileOutputStream(file)
            ));

            try {
              f.write(text);
            } finally {
              f.close();
            }
          }
          PegJSUtils.prototype.args=function(){
            var args = Array.prototype.slice.call(_args, 1);
            return args;
          }         
    }
}

utils = new PegJSUtils();

function isOption(arg) {
  return /-.+/.test(arg);
}

function printVersion() {
  utils.print("PEG.js 0.1");
}

function printHelp() {
  utils.print("Usage: pegjs [options] [--] <parser_var> [<input_file>] [<output_file>]");
  utils.print("");
  utils.print("Generates a parser from the PEG grammar specified in the <input_file> and");
  utils.print("writes it to the <output_file>. The parser object will be stored in a variable");
  utils.print("named <parser_var>.");
  utils.print("");
  utils.print("If the <output_file> is omitted, its name is generated by changing the");
  utils.print("<input_file> extension to \".js\". If both <input_file> and <output_file> are");
  utils.print("omitted, standard input and output are used.");
  utils.print("");
  utils.print("Options:");
  utils.print("  -v, --version       print version information and exit");
  utils.print("  -m, --module        create a CommonJS/node.js module");
  utils.print("  -h, --help          print help and exit");
}

function nextArg() {
  args.shift();
}

function exitSuccess() {
  utils.exit(0);
}

function exitFailure() {
  utils.exit(1);
}

function abort(e) {
  if (e.line !== undefined && e.column !== undefined) {
    utils.error(e.line + ":" + e.column + ": " + e.message);
  } else if(e.stack!==undefined){
    utils.error(e.stack);
  } else {
    utils.error(e);
  }
  exitFailure();
}

var args = utils.args();
var nodeModule=false;
while (args.length > 0 && isOption(args[0])) {
  switch (args[0]) {
    case "-m":
    case "--module":
      nodeModule=true;
      break;
    case "-v":
    case "--version":
      printVersion();
      exitSuccess();
      break;

    case "-h":
    case "--help":
      printHelp();
      exitSuccess();
      break;

    case "--":
      nextArg();
      break;

    default:
      abort("Unknown option: " + args[0] + ".");
  }
  nextArg();
}

if (args.length === 0) {
  abort("Too few arguments.");
}
var parserVar = args[0];
nextArg();

switch (args.length) {
  case 0:
    var inputFile = utils.FILE_STDIN;
    var outputFile = utils.FILE_STDOUT;
    break;
  case 1:
    var inputFile = args[0];
    var outputFile = args[0].replace(/\.[^.]*$/, ".js");
    break;
  case 2:
    var inputFile = args[0];
    var outputFile = args[1];
    break;
  default:
    abort("Too many arguments.");
}


/*
 * This has been made to work with callback so it will support
 * the asynchronus type file implementaions of node.js
 */
utils.readFile(inputFile,function(data){
    try {
      var parser = utils.PEG.buildParser(data);
  
      var append="";
      if(nodeModule){
        append+='\n//Hook for CommonJS/node.js module\nif(typeof exports != "undefined"){ exports.'+parserVar+'='+parserVar+';}\n';
      }
      utils.writeFile(outputFile,parserVar+" = "+parser.toSource()+";\n"+append);
    } catch (e) {
      abort(e);
    }
    
});

